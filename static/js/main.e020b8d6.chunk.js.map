{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","icon","winter","Seasondisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","positon","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"0KAEMA,G,KAAe,CACjBC,OAAQ,CACJC,KAAM,cACNC,KAAM,OAEVC,OAAQ,CACJF,KAAM,iBACNC,KAAM,eAyBCE,EAbO,SAACC,GACnB,IATeC,EAAKC,EASdC,GATSF,EASUD,EAAMC,KATXC,GASgB,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIH,EAENP,EAAaS,GAA5BP,EAFqB,EAErBA,KAAMC,EAFe,EAEfA,KACd,OACI,yBAAKS,UAAS,yBAAoBH,IAC9B,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC1BlBU,EAAU,SAACP,GACb,OACI,yBAAKM,UAAU,oBACX,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKvDD,EAAQE,aAAe,CACnBD,QAAS,gBAEED,QCNTG,E,4MACFC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEACd,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GACG,EAAKC,SAAS,CAAEjB,IAAKgB,EAAQE,OAAOC,cAExC,SAACC,GACG,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAM1C,OAAIc,KAAKX,MAAMV,MAAQqB,KAAKX,MAAMC,aACvB,kBAAC,EAAD,CAAeX,IAAKqB,KAAKX,MAAMV,OAErCqB,KAAKX,MAAMV,KAAOqB,KAAKX,MAAMC,aACvB,wCAAcU,KAAKX,MAAMC,cAGzB,kBAAC,EAAD,Q,+BAKX,OACI,yBAAKN,UAAU,kBACVgB,KAAKC,qB,GA5BJC,IAAMC,WAkCxBC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,cAAc,W","file":"static/js/main.e020b8d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './seasonDisplay.css'\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: \"It's summer\",\r\n        icon: 'sun'\r\n    },\r\n    winter: {\r\n        text: 'Hey its winter',\r\n        icon: 'snowflake'\r\n    }\r\n}\r\n\r\nconst getSeason = (lat, month) => {\r\n    if (month > 2 && month < 9) {\r\n        return lat > 0 ? 'summer' : 'winter'\r\n    } else {\r\n        return lat > 0 ? 'winter' : 'summer'\r\n    }\r\n}\r\n\r\nconst Seasondisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth())\r\n    const { text, icon } = seasonConfig[season]\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <i className={`icon-left massive ${icon} icon`} />\r\n            <h1>{text}</h1>\r\n            <i className={`icon-right massive ${icon} icon`} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Seasondisplay;","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSpinner.defaultProps = {\r\n    message: \"Loading.....\"\r\n}\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport Seasondisplay from './SeasonDisplay';\r\nimport Spinner from './Spinner';\r\nimport './seasonDisplay.css'\r\n\r\nclass App extends React.Component {\r\n    state = { lat: null, errorMessage: '' }\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (positon) => {\r\n                this.setState({ lat: positon.coords.latitude })\r\n            },\r\n            (err) => {\r\n                this.setState({ errorMessage: err.message })\r\n            }\r\n        )\r\n    }\r\n\r\n    renderContent() {\r\n        if (this.state.lat && !this.state.errorMessage) {\r\n            return <Seasondisplay lat={this.state.lat} />\r\n        }\r\n        if (!this.state.lat && this.state.errorMessage) {\r\n            return <div> Error: {this.state.errorMessage}</div>\r\n        }\r\n        else {\r\n            return <Spinner />\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-border\">\r\n                {this.renderContent()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.querySelector(\"#root\")\r\n)"],"sourceRoot":""}